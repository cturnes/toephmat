function [U,S,V] = lrsvd(A, r)
% LRSVD  Algorithm to compute the SVD of a low-rank matrix
%
%   [U,S,V] = LRSVD(A) will look to reduce the computation involved in
%   computing the SVD of a low-rank matrix through the use of random
%   matrices.  The algorithm will multiply the matrix A by an R x SIZE(A,1)
%   on the left and SIZE(A,2) x R matrix on the right, where R <
%   0.5*MIN(SIZE(A)).  If the resulting matrix is full-rank, R will be
%   doubled; if not, the rank of the resulting matrix is the rank of A, and
%   a more efficient SVD can be computed.  If R increases beyond its
%   maximum limit, the regular SVD function will be called.
%
%   [U,S,V] = LRSVD(A,RMAX) allows the user to specify the upper bound of R
%   as RMAX*MIN(SIZE(A)).
%
%
%   Christopher K. Turnes
%   Georgia Institute of Technology
%   Version:  1.0.0
%   Date:     22-Apr-2013
%
%

    % ratio requirement
    if (nargin < 2)
        r = 0.5;
    end
    
    % try to determine rank
    i = 64;
    while (i <= round(r*min(size(A))))
        
        % random combination
        BL = randn(i, size(A, 1));
        BR = randn(size(A, 2), i);
        q = BL*A*BR;
        rk = rank(q);
        if (rk < i)
            break;
        end
        i = i * 2;
        
    end
    
    % fall back to regular svd
    if (i > round(r*min(size(A))))
        
        [U,S,V] = svd(A);
        
    % efficient approximate SVD computation
    else
       
        B = 1/sqrt(rk)*BL(1:rk, :)*A;
        [a,s,b] = svd(B,0);
        U = A*b;
        
        
    end

end